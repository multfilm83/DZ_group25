1. Цели тестирования
список, выделить главную
1.1 Проверка состояния ПО предъявляемым требованиям
1.2 Обеспечение уверенности в качестве ПО
1.3 Поиск очевидных ошибок в ПО, до того как их обнаружит пользователь
1.4 Продукт должен следовать ожиданиям пользователя (САМАЯ ВАЖНАЯ ЦЕЛЬ ТЕСТИРОВАНИЯ)
 

2. Цели, зависимости от того. когда вы начали тестирование

SMOKE - проверка стабильности системы и готовности к расширенным тестам
Critical path test - проверка правильности работы продукта при стандартном использовании его
Extended test - проверка нестандартными вариантами использования продукта, максимально загрузить систему
New feature test - проверка новой функциональности системы, по сути это прохождение всех этапов тестирования
SANITY - детальная проверка общего состояния системы
Regression - проверка последних изменений в коде, что они не добавили новых деффектов в проверенных функциональностях
Re-test - проверка исправленных дефектов
Функциональное тестирование - проверка того, что наш продукт обладает всем функционалом, который требует заказчик
Нефункциональное тестирование:
Тестирование на отказ и восстановление - проверить как восстановится наша система после ошибок и сбоев
Тестирование производительности - проверка работоспособности под нагрузкой
Нагрузочное тестирование - проверка работоспособности системы при нормальных условиях
Стресс-тестирование - проверить работоспособность системы при повышенных нагрузках на нее
Тестирование стабильности - проверить как будет работать система при длительной работе
Объемное тестирование - проверить работу нашей системы при увеличенных объемах обрабатываемых данных
Тестирование удобства пользования - проверить удобство работы с системой с точки зрения конечного пользователя.
Тестирование безопасности - проверка защищенности данных пользователей защищенности нашего продукта.
Тестирование установки - проверка успешности установки, удаления, обновления
Конфигурационное - проверка как работает продукт на разных ОС, на разных браузерах, на разных устройствах
Тестирование локализации - проверка адаптации нашего продукта к работе в другой стране с другим языком, мерами измерения,
другой валюты
Тестирование графического интерсфейса - проверка соответсвия приложения требованиям к графическому интерфейсу
Ad-hoc тестирование - тестирование без документации
Исследовательское тестирование - проверка продукта путем выбирания теста на основании предыдущего теста
Сценарное тестирование - проверка по заранее выбранным тестовым сценариям
Статическое тестирование - проверка документации, кода, требований
Динамическое тестирование - проверка поведения программы во время ее работы



3.Принципы тестирования
3.1 Тестирование показывает наличие дефектов. Тестирование показывает что в продукте есть дефекты.
В процессе тестирования мы снижаем вероятность того, что в продукте остались дефекты. Но если мы их
не нашли, это не означает, что их нет. Они есть всегда.
3.2 Исчерпывающее тестирование невозможно. Так как на это уходит катастрофтчески много времени, которое у нас
ограничено, если мы будет применять "исчерпывающее тестирование" то мы потратим очень много денег, что сильно
скажется на стоимости разработки продукта для компании. 
3.3 Раннее тестирование. Тестирование следует начинать как можно раньше. Ведь чем раньше мы 
обнаружим ту или ошибку, тем дешевле исправление ее будет стоить компании.
3.4 Скопление дефектов. В небольшом количестве модулей сокрыто большое количество дефектов. Принцип Парето:
80% дефектов находится в 20% функций. То есть наибольшее количество дефектов "размазано" не по всему продукту,
а в какой-то определнной функциональности. 
3.5 Парадокс пестецида. Если мы используем одни и теже тесты, то мы находим все меньше ошибок. Но при исправлении
предыдущих ошибок, могут появляться новые ошибки и старые тесты уже не работают. Чтобы не допустить этого
необходимо вносить изменения в наборы тестов, чтобы они отвечали новому состоянию системы и позволяли
"отлавливать" новые ошибки. То есть смена наборов тестов может помочь нам найти класс эквивалентности,
о котором мы подумали.
3.6 Тестирование зависит от контекста. Выбор методологии, техники или типа тестировани будет зависеть от 
природы самой программы. Информационный сайт тестируется иначе, чем банковское приложение. То есть если
продукт сложный, то лучше использовать тест-кейсы, а не чек листы.
3.7 Заблуждение об отсутствии ошибок. Отсутствие найденных ошибок при тестировании не означает что продукт
готов к релизу. Продукт должен быть удобен в использовании пользователю, так как если продукт неудобен, то 
наличие и исправление ошибок будет вторично. Система должна быть удобна пользователю в использовании и
удовлетворять его ожиданиям и потребностям.



4. Типы или виды тестирования
Вид или тип тестирования - это совокупность активностей, направленная на тестирование заданных хврвктеристик 
системы или ее части, основанная на конкретных целях.

4.1. Классификация по запуску кода на исполнение.
4.1.1. Статическое тестирование - процесс тестирования, который производится для верификации практически любого
артефакта разработки (компонент программного кода, требований, системных спецификаций, документов проектирования
и архитектуры программных систем и их компонентов)

4.1.2 Динамическое тестирование - тестирование проводится на работающей системе, не может быть осуществлено
без запуска программного кода приложения

4.2. Классификация по доступу к коду и архитектуре

4.2.1 Тестирование белого ящика - метод тестирования, который предпологает полный доступ к программному коду
продукта. 
4.2.2 Тестирование серого ящика - метод тестирования, который предпологает частичный доступ к коду продукта
(комбинация белого и черного ящика)
4.2.3 Тестирование черного ящика - метод тестирования основанный на работе исключительно с внешним (графическим)
интерфейсом продукта

4.3. Классификация по уровню детализации приложения
4.3.1 Модульное тестирование - тестирование одного логически выделенного и изолированного элемента (модуля)
системы в коде. Предполагает доступ к коду продукта (белый ящик)
4.3.2 Интеграционное тесирование - проверка корректности взаимодействия нескольких модулей, объедененных
в единое целое
4.3.2.1 Тестирование интеграции компонентов - взаимодействие разных модулей между собой
4.3.2.2 Системное интеграционное тестирование - тестирование взаимодействия между всеми элементами системы,
либо взаимодействие разных систем между собой
4.3.2.2.1 Интерфейс программирования приложений (API) - наладка интеграции между двумя системами с помощью 
данного интерфейса. (прикрутить к и-нет магазину какую-нибудь платежную систему, нет необходимости разрабатывать 
свою, можно интегрировать существующую)
4.3.2.2.2 Интерфейс командной строки - инструкции ПК с помощью ввода текстовых строк (командная строка Windows) 
4.3.2.2.3 Графический интерфейс - программные функции в виде графическиъ элементов экрана, что видит 
пользователь, когда открывает сайт в браузере или запускает программу/игру
4.3.3 Системное тестирование  - тестирование на котором проводится функциональное тестирование в совокупности
с оценкой качества системы (ее устойчивости, надежности, безопасности и производительности). Проверка соответсвия
системы исходным требованиям.
4.3.4 Приемочное тестирование - проверка на соответствие потребностям, требованиям и бизнес-процессам 
пользователя

4.4 Классификация по степени автоматизации
4.4.1 Ручное тестирование
4.4.2 Автоматизированное тестирование

4.5 Классификация по принципам работы с приложением
4.5.1 Позитивное тестирование - тестирование с использованием только корректных данных
4.5.2 Негативное тесирование - тестирование с использованием некорректных данных и выполняются некорректные 
операции

4.6 Классификация по уровню функционального тестирования
4.6.1 Smoke тест - тестирование выполняемое на новой сборке, с целью убедиться, что программа стартует и 
выполненяет основные для заказчика функции
4.6.2 Тестирование критического пути - тестирование для проверки функциональности, использумой обычными
пользователями 
4.6.3 Расширенное тестирование - исследование всей заявленной в требованиях функциональности

4.7 Классификация в зависимости от исполнителей
4.7.1 Альфа-тестирование - ранняя версия программного продукта. Выполняется внутри организации разработчика с
возможным частичным привлечением конечных пользователей
4.7.2 Бета-тестирование - программный продукт, выпускаемый для ограниченного количества пользователей. Цель
получить отзывы клиентов о продукте и внести соответствующие изменения

4.8 Классификация в зависимости от целей тесирования
4.8.1 Функциональное тестирование - проверка корректности работы функциональности приложения. Задача 
убедиться в том, что наш продукт обладает всем тем функционалом, который требует заказчик.
4.8.2 Нефункциональное тестирование - тестирование атрибутов компонента или системы, не относящихся к
функциональности
4.8.2.1 Тестирование производительности - определение стабильности и потребления ресурсов в условиях различных
сценариев использования и нагрузок
4.8.2.2 Нагрузочное тестирование - определение и сбор показателей производительности и времени отклика
программно-технической системы или устройства в ответ на внешний запрос с целью установления 
соответствия требованиям, предъявляемым к данной системе (устройству)
4.8.2.3 Тестирование маштабируемости - измерение производительности сети или системы, когда количество
пользовательских запросов увеличивается или уменьшается
4.8.2.4 Объемное тестирование - тестирование продукта, которое проводится для тестирования продукта с
определенным объемом данных
4.8.2.5 Стрессовое тестирование - тип тестирования, направленный на то, чтобы посмотреть как система обращается
с нарастающей нагрузкой (количеством одновременных пользователей)
4.8.2.6 Инсталяционное тестирование - тестирование установки, настройки, обновления или удаления приложения
4.8.2.7 Тестирование интерфейса - проверка требований к пользовательскому интерфейсу
4.8.2.8 Тестирование удобства использования - тестирование удобства использования, понятности и привлекательности 
для пользователя разрабатываемого продукта в контексте заданных условий
4.8.2.9 Тестирование локализации - проверка адаптации продукта для определенной аудитории в соотвествии с
их законами, культурными особенностями
4.8.2.10 Тестирование безопасности - проверка безопаности системы, анализ рисков связанных с обеспечением
целостного подхода к защите приложения, атак хакеров, вирусов, несанкционированного доступа к конфиденциальным
данным
4.8.2.11 Тестирование надежности - цель проверка работоспособности приложения при длительном тестировании с
ожидаемым уровнем нагрузки
4.8.2.12 Регрессионное тестирование - тестирование проверенной функции после внесений изменения в код
приложения, для проверки что изменения не внесли ошибки в уже проверенные области, которые не изменялись.
4.8.2.13 Повторное/подтверждающее тестирование - тестирование сценариев, выявивших ошибки после их исправления, 
для подтверждения успешности исправления этих ошибок







 
